aes(x = score)) +
geom_density(fill = boro)
inspections %>% ggplot(
aes(x = score)) +
geom_density(fill = boro)
inspections %>% ggplot(
aes(x = score, fill = boro)) +
geom_density()
inspections %>% ggplot(
aes(x = score, fill = boro)) +
geom_density() +
coord_cartesian(0,50)
?coord_cartesian
inspections %>% ggplot(
aes(x = score, fill = boro)) +
geom_density() +
coord_cartesian(xlim = c(0,50)
)
inspections %>% ggplot(
aes(x = score, fill = boro)) +
geom_density() +
coord_cartesian(xlim = c(0,30)
)
inspections %>% ggplot(
aes(x = score, = boro)) +
inspections %>% ggplot(
aes(x = score, = boro)) +
inspections %>% ggplot(
aes(x = score, fill = boro)) +
geom_density() +
coord_cartesian(xlim = c(0,30)
)
inspections %>% ggplot(
aes(x = score, fill = boro)) +
geom_density_2d() +
coord_cartesian(xlim = c(0,30)
)
inspections %>% ggplot(
aes(x = score, y = boro)) +
geom_density_2d() +
coord_cartesian(xlim = c(0,30)
)
inspections %>% ggplot(
aes(x = score, group = boro, fill = boro)) +
geom_density(adjust = 1.5) +
coord_cartesian(xlim = c(0,30) +
theme_ipsum
)
library(hrbrthemes)
inspections %>% ggplot(
aes(x = score, group = boro, fill = boro)) +
geom_density(adjust = 1.5) +
coord_cartesian(xlim = c(0,30)
)
?geom_density
inspections %>% ggplot(
aes(x = score, group = boro, fill = boro)) +
geom_density(alpha = .4) +
coord_cartesian(xlim = c(0,30)
)
inspections %>% ggplot(
aes(x = score, group = boro, fill = boro)) +
geom_density(alpha = .4) +
coord_cartesian(xlim = c(0,30) +
facet_grid()
)
inspections %>% ggplot(
aes(x = score, group = boro, fill = boro)) +
geom_density(alpha = .4) +
coord_cartesian(xlim = c(0,30) +
facet_wrap()
)
inspections %>% ggplot(
aes(x = score, group = boro, fill = boro)) +
geom_density(alpha = .4) +
coord_cartesian(xlim = c(0,30) +
facet_wrap(~boro)
)
inspections %>% ggplot(
aes(x = score, group = boro, fill = boro)) +
geom_density(alpha = .4) +
coord_cartesian(xlim = c(0,30)
)
unique(inspections$action)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
df = raw.df %>% rename_with(~ tolower(gsub(" ",".",.x)))
# 2. Convert the inspection.date column from character to date format.
df = df %>% mutate(inspection.date = as.Date(inspection.date, format = "%m/%d/%Y"))
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
df = df %>% mutate(month = as.numeric(substr(inspection.date, 6, 7)))
# 4. Impute the missing values for the 'grade' column
df = df %>% mutate(grade = if_else(is.na(grade), grade, case_when(
between(score, 0, 13) ~ "A",
between(score, 14, 28) ~ "B",
score > 28 ~ "C")))
# 5. Rename the description from the action column to something short so it won't blow up your graph.
df = df %>% mutate(action = case_when(
grepl("Establishment Closed by DOHMH. Violations were cited in the following area(s) and those requiring immediate action were addressed.", x = df$action, fixed = TRUE) ~ "closed",
grepl('Violations were cited in the following area(s)', x = df$action, fixed = TRUE) ~ "violation",
grepl("No violations were recorded at the time of this inspection.", x = df$action, fixed = TRUE) ~ "no violations",
grepl("Establishment re-closed by DOHMH.", x = df$action, fixed = TRUE) ~ "reclosed",
grepl("Establishment re-opened by DOHMH.", x = df$action, fixed = TRUE) ~ "reopened"))
# 6. We want to filter out missing values to make our lives easier for further analysis.
# hist(df1$inspection.date, breaks = 'weeks')
df = df %>% filter(boro != "0", score >= 0)
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
df = df %>% select(camis, boro, cuisine.description, inspection.date, action, score, grade, month)
# 8. Unique inspections
inspections = unique.data.frame(df)
3=4
1. Convert all the column names to lower cases and rename the `cuisine description` column to `cuisine`, `inspection date` to `inspection.date`.
2. Convert the `inspection.date` column from character to date format.
3. If we want to perform analysis for each month, then the date column would be pretty annoying because you have different date for each month. Mutate a new column called `month` that extract the month from `inspection.date` and convert it to numeric. For example, 03/24/2016 -> 03
4. We have scores for some of the observations but their grades are missing. Impute the missing values in grade column with the following rules:
+ 0 <= score < 14: A
+ 14 <= score < 28: B
+ score >= 28: C
+ You can ignore the other grades
5. Rename the description from the action column to something short so it won't blow up your graph.
+ "Violations were cited in the following area(s)." => "violations"
+ "Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed." => "closed"
+ "Establishment re-closed by DOHMH" => "reclosed"
+ "No violations were recorded at the time of this inspection." => "no violations"
+ "Establishment re-opened by DOHMH" => "reopened"
+ Hint: `gsub()` function might be helpful. The function takes regular expression as the `pattern` parameter, which means `()` is treated as a special character. You might want to set `fixed=TRUE` in the `gsub()` function to leave the pattern as it is.
+ **reclosed** means they failed the second time during the same inspection cycle and **reopened** means they passed.
6. We want to filter out missing values to make our life easier for further analysis.
+ Filter out missing values from the `boro` column.
+ Filter out missing values and negative values from the `score` column.
+ Filter out any `inspection date` that doesn't make any sense.
7. Select the following columns from `raw.df`: `camis`, `boro`, `cuisine`, `inspection.date`, `action`, `score`, `grade`, `month`
8. Return only the unqiue inspections from the previous step and save it as a new data frame called `inspections`. The reason is one inspection might have multiple observations with different violation code but their actions are the same, so we count them as one.
###########################
#####One-Sample T-Test#####
###########################
set.seed(0)
heights = rnorm(n = 100, mean = 70, sd = 1) #Randomly generating 100 normally
plot(density(heights), main = "Sample Distribution of Heights")
abline(v = 70, lwd = 2, lty = 2)
abline(v = 68, lwd = 2, lty = 2, col = "red")
sd(heights)
2/sd(heights)
?pq
?pt
pt(2.26)
pt(2.26,100)
qt(2.26,100)
mean(heights)
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100)) #Manually calculating
t.statistic                                                #the t-statistic
pt(q = t.statistic, df = 99, lower.tail = FALSE) #P-value is extremely small;
pt(2.26,100)
###########################
#####Two-Sample T-Test#####
###########################
set.seed(0)
SAT.Spring = rnorm(100, 1550, 200) #Randomly generating 100 normally distributed
#observations with a mean of 1550 and a
#standard deviation of 200.
SAT.Fall = rnorm(80, 1500, 210) #Randomly generating 80 normally distributed
plot(density(SAT.Spring), xlab = "SAT Score",
main = "Sample Distribution of SAT Scores", col = "red")
lines(density(SAT.Fall), col = "blue")
legend("topright", c("Spring", "Fall"), lwd = 1, col = c("red", "blue"))
boxplot(SAT.Spring, SAT.Fall, main = "Sample Distribution of SAT Scores",
col = c("red", "blue"), names = c("Spring", "Fall"))
#Manually calculating the t-statistic.
t.statistic = (mean(SAT.Spring) - mean(SAT.Fall))/sqrt(var(SAT.Spring)/100 + var(SAT.Fall)/80)
t.statistic
t.test(SAT.Spring, SAT.Fall, alternative = "two.sided") #Conducting the t-test for two
################
#####F-Test#####
################
f.statistic = var(SAT.Fall)/var(SAT.Spring) #Manually calculating the F-statistic.
f.statistic
var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
#######################
#####One-Way ANOVA#####
#######################
set.seed(0)
Low.Calorie = rnorm(200, 10, 1) #Randomly generating weight loss measurements
Low.Carb = rnorm(200, 8.5, 1)   #for various diet types.
Low.Fat = rnorm(200, 8, 1)
Control = rnorm(200, 0, 1)
Weight.Loss = c(Low.Calorie, Low.Carb, Low.Fat, Control) #Combining data into
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
##################################
#####X^2 Test of Independence#####
##################################
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
#1a Example numerical EDA.
summary(temp)
# We can also use str(),dim(),nrow(),ncol() to know the dataset
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
# use sapply: sapply(temp, sd)
cor(temp$Body.Temp, temp$Heart.Rate) # Bivariate methods
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
# what if we change prob = T? plot by frequency; we want to plot probability density here
lines(density(temp$Body.Temp), col = "red")
#1a Example numerical EDA.
summary(temp)
# We can also use str(),dim(),nrow(),ncol() to know the dataset
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
# use sapply: sapply(temp, sd)
cor(temp$Body.Temp, temp$Heart.Rate) # Bivariate methods
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
# what if we change prob = T? plot by frequency; we want to plot probability density here
lines(density(temp$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(temp$Heart.Rate), col = "red")
# bivariate density plot
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
lines(density(temp$Body.Temp[temp$Gender == "Male"]), col = "blue")
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
# what if we change prob = T? plot by frequency; we want to plot probability density here
lines(density(temp$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(temp$Heart.Rate), col = "red")
# bivariate density plot
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
lines(density(temp$Body.Temp[temp$Gender == "Male"]), col = "blue")
plot(density(temp$Heart.Rate[temp$Gender == "Male"]), col = "blue")
lines(density(temp$Heart.Rate[temp$Gender == "Female"]), col = "pink")
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = F
)
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = F)
#2a Example graphical EDA.
# check the distributions
hist(temp$Body.Temp, prob = T)
# what if we change prob = T? plot by frequency; we want to plot probability density here
lines(density(temp$Body.Temp), col = "red")
# scatter plot
plot(temp$Body.Temp, temp$Heart.Rate, col = temp$Gender)
# scatter plot
plot(temp$Body.Temp, temp$Heart.Rate, col = temp$Gender)
plot(temp$Body.Temp, temp$Heart.Rate, col = temp$Gender)
#3ab One Sample T-Test
# H0: Aveage(body_temperature)=96.8
t.test(temp$Body.Temp, mu = 98.6, alternative = "two.sided")
t.test(temp$Body.Temp[temp$Gender == "Female"],
temp$Body.Temp[temp$Gender == "Male"],
alternative = "two.sided")
t.test(temp$Body.Temp ~ temp$Gender, alternative = "two.sided") #Equivalent.
#4c (BONUS)
library(dplyr)
Ma = temp %>% filter(Gender == 'Male')
Fe = temp %>% filter(Gender == 'Female')
avg = numeric()
for(i in 1:10000){
m = sample(Ma$Body.Temp, 65, replace=T)
f = sample(Fe$Body.Temp, 65, replace=T)
avg[i] = mean(f-m)
}
lower_bnd = mean(avg) - 2*sd(avg)
upper_bnd = mean(avg) + 2*sd(avg)
#5ab F-Test
#H0: Average(male body_temperature)=Average(female body_temperature)
#H1: Average(male body_temperature)<Average(female body_temperature)
# http://2012books.lardbucket.org/books/beginning-statistics/s15-chi-square-tests-and-f-tests.html
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "less")
#Change the H1:
#H0: Average(male body_temperature)=Average(female body_temperature)
#H1: Average(male body_temperature)>Average(female body_temperature)
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "greater") #p-value = 0.005502
library(ggplot2)
library(ggplot2)
library(datasets)
PlantGrowth
#1 Creating side-by-side boxplots of the data.
boxplot(weight ~ group, data = PlantGrowth)
#2a Calculating the standard deviations of each treatment group.
sd(PlantGrowth$weight[PlantGrowth$group == "ctrl"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt1"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt2"])
# Use ggplot
ggplot(PlantGrowth, aes(x = group, y = weight))+
geom_boxplot(color = c("red", "blue", "green"))
#Conducting the Bartlett test of homogeneity of variances.
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
#3a One-Way ANOVA - access the equality of means of two or more groups?
# What the relationship between a Two sample T-test and One-way ANOVA,if there are exactly two groups?
summary(aov(weight ~ group, data = PlantGrowth))
str(HairEyeColor)
#1ab Visualizing the data with a mosaic plot.
# A mosaic plot is a graphical display that allows you to
# examine the relationship among two or more categorical variables.
mosaicplot(HairEyeColor, shade = TRUE)
#2a Reducing the dataset to all hair colors, brown & blue eye colors, and just
#females.
reduced = HairEyeColor[,1:2,2]
#Visualizing the reduced data with a mosaic plot.
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
#Chi-Squared test of independence.
reduced.test = chisq.test(reduced)
reduced.test
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
reduced.test$observed - reduced.test$expected
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
reduced.test$observed - reduced.test$expected
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
a = c(1,2,3)
b = c(4,5,6)
list(a,b)
c = list(a,b)
View(c)
c[1]
c[[1]]
shiny::runApp('Documents/OneDrive/Documents/School/NYCDSA/M3_R/Class 5_Shiny/Intro/flights_fin/flights_final')
install.packages("rjson")
library(rjson)
fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
tets = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
tets = fromJSON(file = "https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
a = data_frame(tets)
View(tets)
View(a)
a = as.data.frame(tets)
tets = fromJSON(file = "https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
a = as.data.frame(tets)
?as.data.frame()
a = as.data.frame(tets)
View(tets)
install.packages("fromJSON")
library(fromJSON)
install.packages("jsonlite")
library(jsonlite)
fromJSON(a)
fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
a = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
a = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
View(tets)
View(a)
View(a[[1]][[1]])
b = as.data.frame(a)
class(a)
View(a)
View(a[[1]][[1]])
a[1]
View(a)
a[[1]]
c = as.data.frame(a[[1]])
c = as.data.frame(a[[1]][1])
View(c)
d = as.data.frame(a[[1]][2])
View(d)
View(c)
View(d)
View(a)
d = as.data.frame(a[[2]][1])
View(d)
f = rbind(as.data.frame(a[[1]])
)
a[[1]]
f = rbind((a[[1]]))
View(f)
(a[[1]])
f = (a[[1]])
View(f)
f = as.data.frame(a[[1]]))
f = as.data.frame(a[[1]])
f = (a[[1]])
g = do.call(rbind, a[[1]])
View(f)
rbind.data.frame(a[[1]])
View(f)
g = bind_rows(f)
View(g)
a = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
rawJ = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
rawJ = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
raw_song = rawJ[[1]]
raw_yeaar = rawJ[[2]]
raw_song = bind_rows(rawJ[[1]])
raw_year = rawJ[[2]]
df = cbind(raw_song, raw_yeaar)
rawJ = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
raw_song = bind_rows(rawJ[[1]])
raw_year = rawJ[[2]]
c = rawJ[[1]]
View(c)
count(c)
length(c)
rawJ = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
raw_song = rawJ[[1]]
raw_year = rawJ[[2]]
cbind(raw_year[i], raw_song[i])
length(c)
for (i in length(c)) {
cbind(raw_year[i], raw_song[i])
}
rawJ = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
raw_song = rawJ[[1]]
raw_year = rawJ[[2]]
for (i in length(c)) {
cbind(raw_year[i], raw_song[i])
}
d = for (i in length(c)) {
cbind(raw_year[i], raw_song[i])
}
View(raw_song)
View(rawJ)
View(raw_song)
View(c)
rawJ = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
raw_song = rawJ[[1]]
raw_year = rawJ[[2]]
raw_year[i] = cbind(raw_year[i], raw_song[i])
for (i in length(c)) {
raw_year[i] = cbind(raw_year[i], raw_song[i])
}
View(raw_song)
View(raw_year)
rawJ = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
raw_song = rawJ[[1]]
raw_year = rawJ[[2]]
for (i in length(c)) {
raw_song[i] = cbind(raw_year[i], raw_song[i])
}
for (i in length(c)) {
raw_song[i] = cbind(raw_year[i], raw_song[i])
}
rawJ = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
raw_song = rawJ[[1]]
raw_year = rawJ[[2]]
for (i in length(c)) {
raw_song[i] = cbind(raw_year[i], raw_song[i])
}
rawJ = fromJSON("https://raw.githubusercontent.com/kevinschaich/billboard/master/data.json")
raw_song = rawJ[[1]]
raw_year = rawJ[[2]]
for (i in length(c)) {
raw_year[i] = cbind(raw_year[i], raw_song[i])
}
View(raw_year)
df = cbind(raw_song, raw_year)
View(df)
View(rawJ)
test = bind_cols(rawJ)
View(test)
r = bind_rows(raw_song)
View(r)
awer = read_csv(file = '/Users/nicholassilliman/Documents/OneDrive/Documents/School/NYCDSA/Test/TheArtandScienceofData/The Making of Great Music/data')
awer = read_csv2(file = '/Users/nicholassilliman/Documents/OneDrive/Documents/School/NYCDSA/Test/TheArtandScienceofData/The Making of Great Music/data')
awer = read.csv2(file = '/Users/nicholassilliman/Documents/OneDrive/Documents/School/NYCDSA/Test/TheArtandScienceofData/The Making of Great Music/data')
awer = read.csv2(file = '/Users/nicholassilliman/Documents/OneDrive/Documents/School/NYCDSA/Test/TheArtandScienceofData/The Making of Great Music/data/music_df.csv')
View(awer)
library(readr)
music_df <- read_csv("Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject/music_df.csv")
View(music_df)
runApp('Documents/OneDrive/Documents/School/NYCDSA/M3_R/Class 5_Shiny/Intro/flights_fin/flights_final')
music_df <- read_csv("Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject/music_df.csv")
View(music_df)
setwd("~/Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject")
music_df %>% select(-1)
View(music_df)
music_df <- read_csv("Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject/music_df.csv")
music_df %>% select(-1)
music_df <- read_csv("Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject/music_df.csv")
---
# raw data = https://github.com/RosebudAnwuri/TheArtandScienceofData/tree/master/The%20Making%20of%20Great%20Music/data
# https://github.com/kevinschaich/billboard
setwd("~/Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject")
music_df <- read_csv("Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject/music_df.csv")
---
# raw data = https://github.com/RosebudAnwuri/TheArtandScienceofData/tree/master/The%20Making%20of%20Great%20Music/data
# https://github.com/kevinschaich/billboard
setwd("~/Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject")
setwd("~/Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject")
---
# raw data = https://github.com/RosebudAnwuri/TheArtandScienceofData/tree/master/The%20Making%20of%20Great%20Music/data
# https://github.com/kevinschaich/billboard
setwd("~/Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject")
---
# raw data = https://github.com/RosebudAnwuri/TheArtandScienceofData/tree/master/The%20Making%20of%20Great%20Music/data
# https://github.com/kevinschaich/billboard
setwd("~/Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject")
---
# raw data = https://github.com/RosebudAnwuri/TheArtandScienceofData/tree/master/The%20Making%20of%20Great%20Music/data
# https://github.com/kevinschaich/billboard
setwd("~/Documents/OneDrive/Documents/School/NYCDSA/Projects/Shiny/NYCDSA_ShinyProject")
